{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  makeSource,\n  ComputedFields,\n} from \"contentlayer/source-files\"; // eslint-disable-line\nimport rehypePrism from \"rehype-prism-plus\";\nimport rehypeSlug from \"rehype-slug\";\nimport GithubSlugger from \"github-slugger\";\n\nconst getSlug = (doc: any) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\");\n\n/** Post definition */\n\nconst postComputeFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => getSlug(doc),\n  },\n  image: {\n    type: \"string\",\n    resolve: (doc) => `/blog/${getSlug(doc)}/image.png`,\n  },\n  og: {\n    type: \"string\",\n    resolve: (doc) => `/blog/${getSlug(doc)}/image.png`,\n  },\n\n\n  /**This section is not necessary. I personally added it to make the UX(user-experience) better so people can easily jump into a heading title\n   * References: [\"https://delba.dev/blog/next-blog-structured-mdx-content-with-contentlayer#complete-code\", \"https://youtu.be/YC6LqIYVHxI?si=iyYVOlqRuAXSpjiS\"]\n   * Explanation: {\n   * We define a type headings so that we can access the headings on our blog.\n   * Install github slugger & rehype-autolink-headings\n   * Just copy the regexHeader as it is.\n   * }\n   */\n  headings: {\n    type: \"json\",\n    resolve: async (doc) => {\n      const slugger = new GithubSlugger();\n      const regXHeader = /\\n\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n\n      // Check if doc.body.raw is defined and non-empty\n      if (doc.body.raw && doc.body.raw.trim() !== \"\") {\n        const matches = Array.from(doc.body.raw.matchAll(regXHeader));\n\n        // Use map on the array of matches\n        const headings = matches.map(({ groups }: any) => {\n          const flag = groups?.flag;\n          const content = groups?.content;\n          return {\n            heading: flag?.length,\n            text: content,\n            slug: content ? slugger.slug(content) : undefined,\n          };\n        });\n\n        return headings;\n      }\n\n      // Return an empty array if there are no headings\n      return [];\n    },\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  contentType: \"mdx\",\n  filePathPattern: `blog/**/*.mdx`,\n  fields: {\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\", required: true },\n    publishedAt: { type: \"string\", required: true },\n    updatedAt: { type: \"string\", required: false },\n    tags: { type: \"json\", required: false },\n    featured: { type: \"boolean\", required: false },\n    shortTitle: { type: \"string\", required: false },\n  },\n\n  computedFields: postComputeFields,\n}));\n\n/** Projects definition */\n\nconst projectComputeFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => getSlug(doc),\n  },\n  image: {\n    type: \"string\",\n    resolve: (doc) => `/projects/${getSlug(doc)}/image.png`,\n  },\n};\n\nexport const Project = defineDocumentType(() => ({\n  name: \"Project\",\n  contentType: \"mdx\",\n  filePathPattern: `project/**/*.mdx`,\n  fields: {\n    title: { type: \"string\", required: true },\n    description: { type: \"string\", required: true },\n    time: { type: \"string\", required: true },\n    url: { type: \"string\", required: false },\n    tags: { type: \"json\", required: false },\n  },\n  computedFields: projectComputeFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n\n  documentTypes: [Post, Project],\n  mdx: {\n    // @ts-expect-error\n    rehypePlugins: [rehypePrism, rehypeSlug],\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
