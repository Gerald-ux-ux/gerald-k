{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport rehypePrism from \"rehype-prism-plus\";\nimport rehypeSlug from \"rehype-slug\";\nimport GithubSlugger from \"github-slugger\";\n\nconst getSlug = (filePath: string) => path.basename(filePath, \".mdx\");\n\nconst postComputeFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc: any) => getSlug(doc._raw.sourceFileName),\n  },\n  image: {\n    type: \"string\",\n    resolve: (doc: any) =>\n      `/blog/${getSlug(doc._raw.sourceFileName)}/image.png`,\n  },\n  og: {\n    type: \"string\",\n    resolve: (doc: any) =>\n      `/blog/${getSlug(doc._raw.sourceFileName)}/image.png`,\n  },\n\n  headings: {\n    type: \"json\",\n    resolve: async (doc: any) => {\n      const slugger = new GithubSlugger();\n      const regXHeader = /\\n\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n\n      if (doc.body.raw && doc.body.raw.trim() !== \"\") {\n        const matches = Array.from(doc.body.raw.matchAll(regXHeader));\n\n        const headings = matches.map(({ groups }: any) => {\n          const flag = groups?.flag;\n          const content = groups?.content;\n          return {\n            heading: flag?.length,\n            text: content,\n            slug: content ? slugger.slug(content) : undefined,\n          };\n        });\n\n        return headings;\n      }\n\n      return [];\n    },\n  },\n};\n\nconst projectComputeFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc: any) => getSlug(doc._raw.sourceFileName),\n  },\n  image: {\n    type: \"string\",\n    resolve: (doc: any) =>\n      `/projects/${getSlug(doc._raw.sourceFileName)}/image.png`,\n  },\n};\n\nconst getDocumentType = (filePath: string) => {\n  if (filePath.includes(\"blog\")) {\n    return {\n      name: \"Post\",\n      fields: {\n        title: { type: \"string\", required: true },\n        summary: { type: \"string\", required: true },\n        publishedAt: { type: \"string\", required: true },\n        updatedAt: { type: \"string\", required: false },\n        tags: { type: \"json\", required: false },\n        featured: { type: \"boolean\", required: false },\n        shortTitle: { type: \"string\", required: false },\n      },\n      computedFields: postComputeFields,\n    };\n  } else if (filePath.includes(\"project\")) {\n    return {\n      name: \"Project\",\n      fields: {\n        title: { type: \"string\", required: true },\n        description: { type: \"string\", required: true },\n        time: { type: \"string\", required: true },\n        url: { type: \"string\", required: false },\n        tags: { type: \"json\", required: false },\n      },\n      computedFields: projectComputeFields,\n    };\n  }\n};\n\nconst parseFile = (filePath: string) => {\n  const fileContent = fs.readFileSync(filePath, \"utf8\");\n  const { data, content } = matter(fileContent);\n  return { ...data, body: content };\n};\n\ntype DocumentType = {\n  name: string;\n  fields: Record<string, any>;\n  computedFields: Record<string, any>;\n};\n\nexport const makeSource = ({ contentDirPath }: { contentDirPath: string }) => {\n  const documentTypes: DocumentType[] = [];\n\n  const walkSync = (dir: string) => {\n    const files = fs.readdirSync(dir);\n    files.forEach((file) => {\n      const filePath = path.join(dir, file);\n      const stat = fs.statSync(filePath);\n      if (stat.isDirectory()) {\n        walkSync(filePath);\n      } else if (stat.isFile()) {\n        const documentType = getDocumentType(filePath);\n        if (documentType) {\n          const document = parseFile(filePath);\n          documentTypes.push({ ...documentType, ...document });\n        }\n      }\n    });\n  };\n\n  walkSync(contentDirPath);\n\n  return {\n    documentTypes,\n    mdx: {\n      rehypePlugins: [rehypePrism, rehypeSlug],\n    },\n  };\n};\n\nexport default makeSource({\n  contentDirPath: \"content\",\n});\n"],
  "mappings": "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",
  "names": []
}
